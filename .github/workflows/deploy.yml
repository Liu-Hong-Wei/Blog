# .github/workflows/deploy.yml

# 工作流名称
name: Deploy to VPS

# 触发条件：当代码被推送到 main 分支时触发
on:
  push:
    branches:
      - main

# 定义工作任务
jobs:
  # ---- 测试任务 ----
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- 针对 TypeScript/JavaScript 项目的测试 ---
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "23"
      - name: Install dependencies (npm)
        run: |
          cd frontend
          npm install
      # - name: Run tests (npm)
      #  run: npm test

      # --- Python 项目的测试 ---
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install dependencies (pip)
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        # run: |
        # pip install pytest
        # pytest # 运行测试
      # - name: Run tests (pytest)

  deploy:
    # 运行环境：使用最新的 Ubuntu 系统
    runs-on: ubuntu-latest

    # 步骤
    steps:
      # 步骤1: 检出代码
      # 把仓库代码下载到 Runner 中
      - name: Checkout code
        uses: actions/checkout@v4

      # 步骤2: 设置 SSH
      # 配置 SSH 密钥，连接到 VPS
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      # 步骤3: 连接到 VPS 并执行部署命令
      # 通过 SSH 在 VPS 上执行一系列部署操作
      - name: Deploy to VPS
        run: |
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e  # 如果任意命令失败则立即退出
            cd /home/et/Blog
            git pull
            docker compose down
            docker compose up --build -d
            docker image prune -f
          EOF
