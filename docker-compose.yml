# docker-compose.yml

services:
  # 后端 Django 服务
  backend:
    build:
      context: ./backend
    container_name: blog_backend
    # 生产环境中，建议注释掉 volume 挂载，让代码固化在镜像里
    # volumes:
    #   - ./backend:/app
    networks:
      - blog-network
    environment:
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
    depends_on:
      db:
        condition: service_healthy # 增加健康检查依赖 暂时不忽略数据库健康
    restart: unless-stopped

  # 前端 React 服务
  frontend:
    build:
      context: ./frontend
    container_name: blog_frontend
    # 生产环境中，建议注释掉 volume 挂载
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules
    networks:
      - blog-network
      - nginx-proxy   # 【关键修正】连接到 nginx-proxy 网络
    environment:
      # 【关键修正】添加 nginx-proxy 所需的环境变量
      - VIRTUAL_HOST=liuhongwei.org,www.liuhongwei.org
      - LETSENCRYPT_HOST=liuhongwei.org,www.liuhongwei.org
      - LETSENCRYPT_WEBROOT=/usr/share/nginx/html
    depends_on:
      - backend
    restart: unless-stopped

  # PostgreSQL 数据库服务
  db:
    image: postgres:18.0-alpine
    container_name: blog_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - blog-network
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck: # 为数据库添加健康检查
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  blog-network:
  nginx-proxy:
    external: true
